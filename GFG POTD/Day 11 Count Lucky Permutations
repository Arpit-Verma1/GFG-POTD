//{ Driver Code Starts
// Initial Template for C++

#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
// User function Template for C++

class Solution {
  public:
    long long int luckyPermutations(int N, int M, vector<int> arr,
                                    vector<vector<int>> graph) {
        long dp[N][1<<N];

for(int i=0;i<N;i++){
    for(int j=0;j<(1<<N);j++){
        dp[i][j]=0;
    }
}
        bool adj[N][N];
        for(int i=0;i<M;i++){
            adj[graph[i][0]-1][graph[i][1]-1]=true;
            adj[graph[i][1]-1][graph[i][0]-1]=true;
        }

        for(int i=0;i<N;i++){
            dp[i][1<<i]=1;
        }

        for(int bitmask=1;bitmask<(1<<N);bitmask++){
            for(int i=0;i<N;i++){
                for(int j=0;j<N;j++){
                    if(i!=j && adj[arr[i]-1][arr[j]-1] && arr[i]!=arr[j]
                    && (1 & (bitmask>>j))>0){
                        dp[i][bitmask]+=dp[j][bitmask ^ (1<<i)];
                    }
                }
            }
        }

        long ans=0;
        for(int i=0;i<N;i++){
            ans+=dp[i][(1<<N)-1];
        }
        return ans;
    }
};

//{ Driver Code Starts.
int main() {
    int t;
    cin >> t;
    while (t--) {
        int N, M;
        cin >> N >> M;
        vector<int> arr(N);
        vector<vector<int>> graph(M, vector<int>(2));
        for (int i = 0; i < N; i++) {
            cin >> arr[i];
        }
        for (int i = 0; i < M; i++) {
            for (int j = 0; j < 2; j++) {
                cin >> graph[i][j];
            }
        }
        Solution obj;
        cout << obj.luckyPermutations(N, M, arr, graph) << endl;
    }
}

// } Driver Code Ends
